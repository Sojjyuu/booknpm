"use client";
import { Grid, Typography, Divider } from "@mui/material";
import { Book } from "../../types/book"; // р╣Бр╕Бр╣Й path р╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З (р╕Цр╣Йр╕▓р╕Ьр╕┤р╕Фр╣Гр╕лр╣Йр╕Ыр╕гр╕▒р╕Ър╕Хр╕▓р╕бр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М)
import BookCard from "./BookCard";

interface BookListProps {
  books: Book[]; // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ books р╣Др╕бр╣Ир╣Ар╕Ыр╣Зр╕Щ undefined (р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ р╣Гр╕лр╣Й default [])
  user: any; // р╕лр╕гр╕╖р╕н User type р╕Ир╕▓р╕Б types/user.ts
  searchTerm: string;
  isLoading: boolean;
  onEdit: (book: Book) => void;
  onDelete: (id: string) => void;
}

export default function BookList({ 
  books = [], // Default empty array р╕Цр╣Йр╕▓ props р╣Ар╕Ыр╣Зр╕Щ undefined
  user, 
  searchTerm, 
  isLoading, 
  onEdit, 
  onDelete 
}: BookListProps) {
  // Trim searchTerm р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ space-only search
  const trimmedSearchTerm = searchTerm.trim().toLowerCase();
  
  // Filter books based on search (р╣Ар╕Юр╕┤р╣Ир╕б check book properties р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ undefined error)
  const filteredBooks = books.filter((book) => {
    if (!book || !book.title || !book.author || !book.genre) return false; // Skip invalid books
    return (
      book.title.toLowerCase().includes(trimmedSearchTerm) ||
      book.author.toLowerCase().includes(trimmedSearchTerm) ||
      book.genre.toLowerCase().includes(trimmedSearchTerm)
    );
  });

  // р╕Цр╣Йр╕▓р╕Бр╕│р╕ер╕▒р╕З loading р╣Бр╕кр╕Фр╕З loading message
  if (isLoading) {
    return (
      <Typography
        sx={{
          fontSize: "1.3rem",
          textAlign: "center",
          color: "#8B4513",
          mt: 6,
          fontWeight: 500,
          fontFamily: "'Georgia', serif",
        }}
      >
        р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕Кр╕▒р╣Йр╕Щр╕зр╕▓р╕Зр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н...
      </Typography>
    );
  }

  // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕ер╕в (books.length === 0) р╣Бр╕кр╕Фр╕З empty state р╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щ
  if (books.length === 0) {
    return (
      <>
        <Typography
          variant="h6"
          sx={{
            color: "#5D4037",
            mb: 4,
            fontSize: "1.2rem",
            textAlign: "center",
            fontFamily: "'Georgia', serif",
            fontStyle: "italic",
          }}
        >
          ЁЯУЪ р╕Кр╕▒р╣Йр╕Щр╕зр╕▓р╕Зр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Вр╕нр╕Зр╣Ар╕гр╕▓: р╕кр╕│р╕гр╕зр╕Ир╕Др╕нр╕ер╣Ар╕ер╕Бр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╕Др╕▒р╕Фр╕кр╕гр╕гр╕бр╕▓р╕нр╕вр╣Ир╕▓р╕Зр╕Фр╕╡
        </Typography>
        <Divider sx={{ mb: 4, borderColor: "#D2B48C", height: 2 }} />
        <Typography
          sx={{
            textAlign: "center",
            mt: 6,
            color: "#8B4513",
            fontSize: "1.1rem",
            fontStyle: "italic",
            fontFamily: "'Georgia', serif",
          }}
        >
          р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕Щр╕Кр╕▒р╣Йр╕Щр╕зр╕▓р╕З... р╕ер╕нр╕Зр╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕лр╕бр╣Ир╕Фр╕╣р╕кр╕┤!
        </Typography>
      </>
    );
  }

  return (
    <>
      <Typography
        variant="h6"
        sx={{
          color: "#5D4037",
          mb: 4,
          fontSize: "1.2rem",
          textAlign: "center",
          fontFamily: "'Georgia', serif",
          fontStyle: "italic",
        }}
      >
        ЁЯУЪ р╕Кр╕▒р╣Йр╕Щр╕зр╕▓р╕Зр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Вр╕нр╕Зр╣Ар╕гр╕▓: р╕кр╕│р╕гр╕зр╕Ир╕Др╕нр╕ер╣Ар╕ер╕Бр╕Кр╕▒р╕Щр╕Чр╕╡р╣Ир╕Др╕▒р╕Фр╕кр╕гр╕гр╕бр╕▓р╕нр╕вр╣Ир╕▓р╕Зр╕Фр╕╡
      </Typography>
      <Divider sx={{ mb: 4, borderColor: "#D2B48C", height: 2 }} />

      {/* Render Grid р╣Ар╕Йр╕Юр╕▓р╕░р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡ filteredBooks р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ empty map */}
      {filteredBooks.length > 0 ? (
        <Grid container spacing={3}>
          {filteredBooks.map((book, index) => (
            <Grid 
              item 
              xs={12} 
              sm={6} 
              md={4} 
              lg={3} 
              key={book._id || `book-${index}`} // Fallback key р╕Цр╣Йр╕▓ _id р╣Ар╕Ыр╣Зр╕Щ null/undefined
            >
              <BookCard
                book={book}
                user={user}
                onEdit={onEdit}
                onDelete={onDelete}
              />
            </Grid>
          ))}
        </Grid>
      ) : (
        <Typography
          sx={{
            textAlign: "center",
            mt: 6,
            color: "#8B4513",
            fontSize: "1.1rem",
            fontStyle: "italic",
            fontFamily: "'Georgia', serif",
          }}
        >
          р╣Др╕бр╣Ир╕Юр╕Ър╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓... р╕ер╕нр╕Зр╕Др╣Йр╕Щр╕лр╕▓р╣Гр╕лр╕бр╣Ир╕Фр╕╣р╕кр╕┤!
        </Typography>
      )}
    </>
  );
}