"use client";
import { useEffect, useState } from "react";
import {
  Container,
  Typography,
  Card,
  CardContent,
  Stack,
  Box,
  Button,
  Divider,
  Avatar,
  Paper,
  Modal,
  TextField,
  Grid,
  Chip,
  Fade,
} from "@mui/material";
import LibraryBooksIcon from "@mui/icons-material/LibraryBooks";
import BookIcon from "@mui/icons-material/Book";
import SearchIcon from "@mui/icons-material/Search";
import AddIcon from "@mui/icons-material/Add";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import type { BookResponse, Book } from "../types/book";
import Link from "next/link";

interface User {
  username: string;
  email: string;
}

export default function Home() {
  const [booksData, setBooksData] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [isNewDialogOpen, setIsNewDialogOpen] = useState(false);
  const [newBook, setNewBook] = useState({
    title: "",
    author: "",
    description: "",
    genre: "",
    year: 2024,
    price: 0,
    available: true,
  });
  const [editBook, setEditBook] = useState<Book | null>(null);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");

  const getData = async () => {
    setIsLoading(true);
    const response = await fetch("http://localhost:3000/api/books");
    if (response.ok) {
      const data = await response.json();
      const resData: BookResponse = data;
      setBooksData(resData.books);
    }
    setIsLoading(false);
  };

  useEffect(() => {
    getData();
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("user");
    setUser(null);
  };

  const handleNewBook = async () => {
    const token = localStorage.getItem("token");
    await fetch("http://localhost:3000/api/books", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: token ? `Bearer ${token}` : "",
      },
      body: JSON.stringify(newBook),
    });
    setIsNewDialogOpen(false);
    setNewBook({
      title: "",
      author: "",
      description: "",
      genre: "",
      year: 2024,
      price: 0,
      available: true,
    });
    getData(); // refresh book list
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
  const handleDeleteBook = async (id: string) => {
    const token = localStorage.getItem("token");
    await fetch(`http://localhost:3000/api/books/${id}`, {
      method: "DELETE",
      headers: {
        Authorization: token ? `Bearer ${token}` : "",
      },
    });
    getData(); // refresh book list
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const openEditDialog = (book: Book) => {
    setEditBook(book);
    setIsEditDialogOpen(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
  const handleUpdateBook = async () => {
    if (!editBook) return;
    const token = localStorage.getItem("token");
    await fetch(`http://localhost:3000/api/books/${editBook._id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: token ? `Bearer ${token}` : "",
      },
      body: JSON.stringify(editBook),
    });
    setIsEditDialogOpen(false);
    setEditBook(null);
    getData(); // refresh book list
  };

  // Filter books based on search
  const filteredBooks = booksData.filter(
    (book) =>
      book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      book.author.toLowerCase().includes(searchTerm.toLowerCase()) ||
      book.genre.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: "linear-gradient(135deg, #f5f5dc 0%, #e8e4d9 100%)", // Warm parchment-like gradient
        py: 6,
        position: "relative",
        "&::before": {
          content: '""',
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          height: "200px",
          background: "linear-gradient(to bottom, #8B4513 0%, #A0522D 100%)", // Wooden shelf header
          zIndex: -1,
        },
      }}
    >
      <Container
        maxWidth="lg"
        sx={{
          position: "relative",
          zIndex: 1,
          background: "rgba(255, 255, 255, 0.95)",
          p: { xs: 2, md: 4 },
          borderRadius: "20px",
          boxShadow: "0px 10px 30px rgba(139, 69, 19, 0.2)", // Deeper shadow for depth
          border: "2px solid #D2B48C", // Antique border
          backdropFilter: "blur(10px)",
        }}
      >
        {/* Header - Bookstore Banner */}
        <Fade in timeout={800}>
          <Box
            sx={{
              textAlign: "center",
              mb: 5,
              pt: 4,
            }}
          >
            <LibraryBooksIcon
              sx={{
                fontSize: { xs: 48, md: 72 },
                color: "#8B4513",
                mb: 2,
                filter: "drop-shadow(2px 2px 4px rgba(0,0,0,0.1))",
              }}
            />
            <Typography
              variant="h2"
              fontWeight="bold"
              sx={{
                color: "#5D4037",
                textShadow: "2px 2px 4px rgba(0,0,0,0.1)",
                fontFamily: "'Georgia', serif", // Classic serif font
                mb: 1,
              }}
            >
              üìö ‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà
            </Typography>
            <Typography
              variant="h6"
              sx={{
                color: "#8B4513",
                fontStyle: "italic",
                fontFamily: "'Times New Roman', serif",
              }}
            >
              ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠...
            </Typography>
          </Box>
        </Fade>

        {/* Login/Register or User Info */}
        {!user ? (
          <Paper
            elevation={3}
            sx={{
              p: 3,
              mb: 4,
              display: "flex",
              gap: 2,
              justifyContent: "center",
              borderRadius: "12px",
              bgcolor: "#FFF8DC",
              border: "1px solid #DAA520",
              boxShadow: "0px 4px 12px rgba(218, 165, 32, 0.2)",
            }}
          >
            <Button
              variant="contained"
              startIcon={<BookIcon />}
              sx={{
                bgcolor: "#8B4513",
                color: "white",
                "&:hover": { bgcolor: "#A0522D" },
                borderRadius: "8px",
                fontFamily: "'Georgia', serif",
                textTransform: "none",
                px: 3,
              }}
              component={Link}
              href="/register"
            >
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </Button>
            <Button
              variant="outlined"
              startIcon={<SearchIcon />}
              sx={{
                borderColor: "#8B4513",
                color: "#8B4513",
                "&:hover": { borderColor: "#A0522D", color: "#A0522D" },
                borderRadius: "8px",
                fontFamily: "'Georgia', serif",
                textTransform: "none",
                px: 3,
              }}
              component={Link}
              href="/login"
            >
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
          </Paper>
        ) : (
          <Paper
            elevation={3}
            sx={{
              mb: 4,
              p: 3,
              bgcolor: "#FFF8DC",
              borderRadius: "12px",
              border: "1px solid #DAA520",
              boxShadow: "0px 4px 12px rgba(218, 165, 32, 0.2)",
            }}
          >
            <Box display="flex" alignItems="center" gap={2}>
              <Avatar
                sx={{
                  bgcolor: "#8B4513",
                  width: 50,
                  height: 50,
                  fontSize: "1.5rem",
                }}
              >
                {user && user.username.charAt(0).toUpperCase()}
              </Avatar>
              <Box>
                <Typography
                  variant="h6"
                  sx={{
                    color: "#5D4037",
                    fontFamily: "'Georgia', serif",
                  }}
                >
                  üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user.username}
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    color: "#8B4513",
                    fontStyle: "italic",
                    fontFamily: "'Times New Roman', serif",
                  }}
                >
                  üìß {user.email}
                </Typography>
              </Box>
            </Box>
            <Button
              variant="outlined"
              color="error"
              startIcon={<DeleteIcon />}
              sx={{
                mt: 2,
                borderColor: "#CD853F",
                color: "#CD853F",
                "&:hover": { borderColor: "#A0522D", color: "#A0522D" },
                borderRadius: "8px",
                fontFamily: "'Georgia', serif",
                textTransform: "none",
              }}
              onClick={handleLogout}
            >
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
          </Paper>
        )}

        {/* Add New Book Button (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡πÅ‡∏•‡πâ‡∏ß) */}
        {user && (
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            sx={{
              mb: 4,
              bgcolor: "#8B4513",
              "&:hover": { bgcolor: "#A0522D" },
              borderRadius: "12px",
              fontFamily: "'Georgia', serif",
              textTransform: "none",
              px: 4,
              boxShadow: "0px 4px 12px rgba(139, 69, 19, 0.3)",
            }}
            onClick={() => setIsNewDialogOpen(true)}
          >
            ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
          </Button>
        )}

        {/* Search Bar */}
        <Paper
          elevation={2}
          sx={{
            p: 2,
            mb: 4,
            borderRadius: "12px",
            bgcolor: "#FFF8DC",
            border: "1px solid #DAA520",
          }}
        >
          <Box display="flex" alignItems="center" gap={1}>
            <SearchIcon sx={{ color: "#8B4513" }} />
            <TextField
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠, ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              fullWidth
              variant="outlined"
              size="small"
              sx={{
                "& .MuiOutlinedInput-root": {
                  borderRadius: "8px",
                  background: "white",
                },
              }}
            />
          </Box>
        </Paper>

        {/* Description */}
        <Typography
          variant="h6"
          sx={{
            color: "#5D4037",
            mb: 4,
            fontSize: "1.2rem",
            textAlign: "center",
            fontFamily: "'Georgia', serif",
            fontStyle: "italic",
          }}
        >
          üìö ‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤: ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏™‡∏£‡∏£‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ
        </Typography>
        <Divider sx={{ mb: 4, borderColor: "#D2B48C", height: 2 }} />

        {/* Book List - Grid Layout like Shelves */}
        {isLoading && (
          <Typography
            sx={{
              fontSize: "1.3rem",
              textAlign: "center",
              color: "#8B4513",
              mt: 6,
              fontWeight: 500,
              fontFamily: "'Georgia', serif",
            }}
          >
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠...
          </Typography>
        )}

        {!isLoading && (
          <Grid container spacing={3}>
            {filteredBooks.map((book) => (
              <Grid item xs={12} sm={6} md={4} lg={3} key={book._id}>
                <Fade in timeout={600 + Math.random() * 400}>
                  <Box>
                    <Link href={`/book/${book._id}`} style={{ textDecoration: "none" }}>
                      <Card
                        elevation={4}
                        sx={{
                          borderRadius: "16px",
                          cursor: "pointer",
                          background: "linear-gradient(145deg, #FFF8DC 0%, #F5DEB3 100%)", // Book cover-like gradient
                          border: "2px solid #DAA520",
                          transition: "all 0.3s ease",
                          height: "100%",
                          display: "flex",
                          flexDirection: "column",
                          position: "relative",
                          overflow: "hidden",
                          "&::before": {
                            content: '""',
                            position: "absolute",
                            top: 0,
                            left: 0,
                            right: 0,
                            height: "4px",
                            background: "#8B4513", // Book spine top
                          },
                          "&:hover": {
                            transform: "translateY(-8px) rotate(1deg)",
                            boxShadow: "0px 15px 35px rgba(139, 69, 19, 0.3)",
                            background: "linear-gradient(145deg, #F5DEB3 0%, #FFF8DC 100%)",
                          },
                        }}
                      >
                        <CardContent sx={{ p: 2, flexGrow: 1, display: "flex", flexDirection: "column" }}>
                          <Box sx={{ mb: 1 }}>
                            <Chip
                              label={book.genre}
                              size="small"
                              sx={{
                                bgcolor: "#DEB887",
                                color: "#5D4037",
                                fontSize: "0.75rem",
                                fontWeight: "bold",
                                mb: 1,
                              }}
                            />
                          </Box>
                          <Typography
                            variant="h6"
                            sx={{
                              fontWeight: 700,
                              color: "#5D4037",
                              mb: 1,
                              fontFamily: "'Georgia', serif",
                              lineHeight: 1.2,
                              flexGrow: 1,
                            }}
                          >
                            üìñ {book.title}
                          </Typography>
                          <Typography
                            variant="body2"
                            sx={{
                              fontSize: "0.95rem",
                              fontStyle: "italic",
                              color: "#8B4513",
                              mb: 1,
                              fontFamily: "'Times New Roman', serif",
                            }}
                          >
                            ‚úçÔ∏è ‡πÇ‡∏î‡∏¢ {book.author}
                          </Typography>
                          <Typography
                            variant="caption"
                            sx={{
                              color: "#A0522D",
                              fontSize: "0.8rem",
                            }}
                          >
                            üìÖ {book.year} | üí∞ {book.price} ‡∏ö‡∏≤‡∏ó
                          </Typography>
                        </CardContent>
                      </Card>
                    </Link>
                    {/* Edit/Delete Buttons */}
                    {user && (
                      <Box
                        display="flex"
                        gap={1}
                        mt={2}
                        justifyContent="center"
                      >
                        <Button
                          size="small"
                          variant="outlined"
                          startIcon={<EditIcon />}
                          onClick={(e) => {
                            e.preventDefault();
                            openEditDialog(book);
                          }}
                          sx={{
                            borderColor: "#8B4513",
                            color: "#8B4513",
                            borderRadius: "8px",
                            fontSize: "0.75rem",
                            textTransform: "none",
                            fontFamily: "'Georgia', serif",
                          }}
                        >
                          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </Button>
                        <Button
                          size="small"
                          variant="outlined"
                          startIcon={<DeleteIcon />}
                          onClick={(e) => {
                            e.preventDefault();
                            handleDeleteBook(book._id);
                          }}
                          sx={{
                            borderColor: "#CD853F",
                            color: "#CD853F",
                            borderRadius: "8px",
                            fontSize: "0.75rem",
                            textTransform: "none",
                            fontFamily: "'Georgia', serif",
                          }}
                        >
                          ‡∏•‡∏ö
                        </Button>
                      </Box>
                    )}
                  </Box>
                </Fade>
              </Grid>
            ))}
          </Grid>
        )}

        {filteredBooks.length === 0 && !isLoading && (
          <Typography
            sx={{
              textAlign: "center",
              mt: 6,
              color: "#8B4513",
              fontSize: "1.1rem",
              fontStyle: "italic",
              fontFamily: "'Georgia', serif",
            }}
          >
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤... ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏™‡∏¥!
          </Typography>
        )}

        {/* Modal for Add New Book */}
        <Modal open={isNewDialogOpen} onClose={() => setIsNewDialogOpen(false)}>
          <Box
            sx={{
              maxWidth: 500,
              mx: "auto",
              mt: "10vh",
              bgcolor: "#FFF8DC",
              borderRadius: "16px",
              boxShadow: "0px 10px 40px rgba(139, 69, 19, 0.3)",
              p: 4,
              border: "2px solid #DAA520",
              fontFamily: "'Georgia', serif",
            }}
          >
            <Typography variant="h5" sx={{ mb: 3, color: "#5D4037", textAlign: "center" }}>
              ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡πà‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á
            </Typography>
            <Stack spacing={3}>
              <TextField
                label="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"
                value={newBook.title}
                onChange={(e) =>
                  setNewBook((prev) => ({ ...prev, title: e.target.value }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á"
                value={newBook.author}
                onChange={(e) =>
                  setNewBook((prev) => ({ ...prev, author: e.target.value }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                multiline
                rows={3}
                value={newBook.description}
                onChange={(e) =>
                  setNewBook((prev) => ({
                    ...prev,
                    description: e.target.value,
                  }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏ß‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢, ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)"
                value={newBook.genre}
                onChange={(e) =>
                  setNewBook((prev) => ({ ...prev, genre: e.target.value }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå"
                type="number"
                value={newBook.year}
                onChange={(e) =>
                  setNewBook((prev) => ({
                    ...prev,
                    year: Number(e.target.value),
                  }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)"
                type="number"
                step="0.01"
                value={newBook.price}
                onChange={(e) =>
                  setNewBook((prev) => ({
                    ...prev,
                    price: Number(e.target.value),
                  }))
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <Box display="flex" gap={2} justifyContent="flex-end">
                <Button
                  variant="contained"
                  sx={{
                    bgcolor: "#8B4513",
                    "&:hover": { bgcolor: "#A0522D" },
                    borderRadius: "8px",
                    fontFamily: "'Georgia', serif",
                    textTransform: "none",
                  }}
                  onClick={handleNewBook}
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                </Button>
                <Button
                  variant="outlined"
                  sx={{
                    borderColor: "#CD853F",
                    color: "#CD853F",
                    borderRadius: "8px",
                    fontFamily: "'Georgia', serif",
                    textTransform: "none",
                  }}
                  onClick={() => setIsNewDialogOpen(false)}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
              </Box>
            </Stack>
          </Box>
        </Modal>

        {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ */}
              
        <Modal open={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)}>
          <Box
            sx={{
              maxWidth: 500,
              mx: "auto",
              mt: "10vh",
              bgcolor: "#FFF8DC",
              borderRadius: "16px",
              boxShadow: "0px 10px 40px rgba(139, 69, 19, 0.3)",
              p: 4,
              border: "2px solid #DAA520",
              fontFamily: "'Georgia', serif",
            }}
          >
            <Typography variant="h5" sx={{ mb: 3, color: "#5D4037", textAlign: "center" }}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
            </Typography>
            <Stack spacing={3}>
              <TextField
                label="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"
                value={editBook?.title ?? ""}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, title: e.target.value } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á"
                value={editBook?.author ?? ""}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, author: e.target.value } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                multiline
                rows={3}
                value={editBook?.description ?? ""}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, description: e.target.value } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
                value={editBook?.genre ?? ""}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, genre: e.target.value } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå"
                type="number"
                value={editBook?.year ?? 2024}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, year: Number(e.target.value) } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <TextField
                label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)"
                type="number"
                step="0.01"
                value={editBook?.price ?? 0}
                onChange={(e) =>
                  setEditBook((prev) =>
                    prev ? { ...prev, price: Number(e.target.value) } : prev
                  )
                }
                fullWidth
                variant="outlined"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: "8px",
                    background: "white",
                  },
                }}
              />
              <Box display="flex" gap={2} justifyContent="flex-end">
                <Button
                  variant="contained"
                  sx={{
                    bgcolor: "#8B4513",
                    "&:hover": { bgcolor: "#A0522D" },
                    borderRadius: "8px",
                    fontFamily: "'Georgia', serif",
                    textTransform: "none",
                  }}
                  onClick={handleUpdateBook}
                >
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </Button>
                <Button
                  variant="outlined"
                  sx={{
                    borderColor: "#CD853F",
                    color: "#CD853F",
                    borderRadius: "8px",
                    fontFamily: "'Georgia', serif",
                    textTransform: "none",
                  }}
                  onClick={() => setIsEditDialogOpen(false)}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
              </Box>
            </Stack>
          </Box>
        </Modal>
      </Container>
    </Box>
  );
}